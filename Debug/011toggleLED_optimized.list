
011toggleLED_optimized.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000001c4  08000188  08000188  00001188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  0800034c  08000354  00001354  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  0800034c  0800034c  00001354  2**0
                  CONTENTS
  4 .ARM          00000000  0800034c  0800034c  00001354  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800034c  08000354  00001354  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800034c  0800034c  0000134c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08000350  08000350  00001350  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000000  20000000  20000000  00001354  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00001354  2**0
                  CONTENTS
 10 .bss          0000001c  20000000  20000000  00002000  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000001c  2000001c  00002000  2**0
                  ALLOC
 12 .ARM.attributes 0000002a  00000000  00000000  00001354  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000055d  00000000  00000000  0000137e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000000e8  00000000  00000000  000018db  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_loclists 00000028  00000000  00000000  000019c3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00000048  00000000  00000000  000019f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00000039  00000000  00000000  00001a38  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00000f6e  00000000  00000000  00001a71  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0000053f  00000000  00000000  000029df  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    00003e49  00000000  00000000  00002f1e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .comment      00000043  00000000  00000000  00006d67  2**0
                  CONTENTS, READONLY
 22 .debug_frame  0000004c  00000000  00000000  00006dac  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_line_str 000000bf  00000000  00000000  00006df8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000000 	.word	0x20000000
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08000334 	.word	0x08000334

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000004 	.word	0x20000004
 80001c4:	08000334 	.word	0x08000334

080001c8 <main>:
	GPIOx_ODR_t volatile *const pOutputRegisterGPIOD = (GPIOx_ODR_t*) 0x40020C14; // Address to configure the turning on/off of LEDs


	// Enable the clock for GPOID and GPOIA peripheral in the AHB1EN
	// Use the RCC to enable the clock for GPOID and GPOIA to allow of passage of voltage/information
	pClockAddress->gpiod_en = 1; // Activate clock in GPIOD to pass voltage to turn on the LEDs
 80001c8:	4931      	ldr	r1, [pc, #196]	@ (8000290 <main+0xc8>)
	pClockAddress->gpioa_en = 1; // Activate clock in GPIOA to pass voltage to read the data from the pin

	// Configure PD12 outputs
	// Set bits 24 onwards to 01, meaning PD12->PD15 are on output mode to turn on LEDs
	pModeRegisterGPIOD->pin_12 = 1;
 80001ca:	4b32      	ldr	r3, [pc, #200]	@ (8000294 <main+0xcc>)
	pClockAddress->gpiod_en = 1; // Activate clock in GPIOD to pass voltage to turn on the LEDs
 80001cc:	f8d1 0830 	ldr.w	r0, [r1, #2096]	@ 0x830
 80001d0:	f040 0008 	orr.w	r0, r0, #8
 80001d4:	f8c1 0830 	str.w	r0, [r1, #2096]	@ 0x830
	pClockAddress->gpioa_en = 1; // Activate clock in GPIOA to pass voltage to read the data from the pin
 80001d8:	f8d1 0830 	ldr.w	r0, [r1, #2096]	@ 0x830
	pModeRegisterGPIOD->pin_12 = 1;
 80001dc:	2201      	movs	r2, #1
	pClockAddress->gpioa_en = 1; // Activate clock in GPIOA to pass voltage to read the data from the pin
 80001de:	4310      	orrs	r0, r2
 80001e0:	f8c1 0830 	str.w	r0, [r1, #2096]	@ 0x830
	pModeRegisterGPIOD->pin_12 = 1;
 80001e4:	f8d3 1c00 	ldr.w	r1, [r3, #3072]	@ 0xc00
 80001e8:	f362 6119 	bfi	r1, r2, #24, #2
 80001ec:	f8c3 1c00 	str.w	r1, [r3, #3072]	@ 0xc00
	pModeRegisterGPIOD->pin_13 = 1;
 80001f0:	f8d3 1c00 	ldr.w	r1, [r3, #3072]	@ 0xc00
 80001f4:	f362 619b 	bfi	r1, r2, #26, #2
 80001f8:	f8c3 1c00 	str.w	r1, [r3, #3072]	@ 0xc00
	pModeRegisterGPIOD->pin_14 = 1;
 80001fc:	f8d3 1c00 	ldr.w	r1, [r3, #3072]	@ 0xc00
 8000200:	f362 711d 	bfi	r1, r2, #28, #2
 8000204:	f8c3 1c00 	str.w	r1, [r3, #3072]	@ 0xc00
	pModeRegisterGPIOD->pin_15 = 1;
 8000208:	f8d3 1c00 	ldr.w	r1, [r3, #3072]	@ 0xc00
 800020c:	f362 719f 	bfi	r1, r2, #30, #2
 8000210:	f8c3 1c00 	str.w	r1, [r3, #3072]	@ 0xc00

	// Configure PA0 as input mode
	pModeRegisterGPIOA->pin_0 = 0; // Clear the first two positions of the port a, to set those as INPUT mode
 8000214:	681a      	ldr	r2, [r3, #0]
 8000216:	f36f 0201 	bfc	r2, #0, #2
 800021a:	601a      	str	r2, [r3, #0]

	// Turn on/of the LED
	while(1) {
		uint8_t pintStatus = pModeInputGPIOA->pin_0; // Read if the pin 0 is getting data/voltage
 800021c:	691a      	ldr	r2, [r3, #16]

		if (pintStatus) {
 800021e:	f012 0201 	ands.w	r2, r2, #1
 8000222:	d01b      	beq.n	800025c <main+0x94>
			// Set bits 24 onwards to 1, meaning PD12->PD15 are having LEDs turned on
			pOutputRegisterGPIOD->pin_12 = 1;
 8000224:	f8d3 2c14 	ldr.w	r2, [r3, #3092]	@ 0xc14
 8000228:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800022c:	f8c3 2c14 	str.w	r2, [r3, #3092]	@ 0xc14
			pOutputRegisterGPIOD->pin_13 = 1;
 8000230:	f8d3 2c14 	ldr.w	r2, [r3, #3092]	@ 0xc14
 8000234:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8000238:	f8c3 2c14 	str.w	r2, [r3, #3092]	@ 0xc14
			pOutputRegisterGPIOD->pin_14 = 1;
 800023c:	f8d3 2c14 	ldr.w	r2, [r3, #3092]	@ 0xc14
 8000240:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8000244:	f8c3 2c14 	str.w	r2, [r3, #3092]	@ 0xc14
			pOutputRegisterGPIOD->pin_15 = 1;
 8000248:	f8d3 2c14 	ldr.w	r2, [r3, #3092]	@ 0xc14
 800024c:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8000250:	f8c3 2c14 	str.w	r2, [r3, #3092]	@ 0xc14
		uint8_t pintStatus = pModeInputGPIOA->pin_0; // Read if the pin 0 is getting data/voltage
 8000254:	691a      	ldr	r2, [r3, #16]
		if (pintStatus) {
 8000256:	f012 0201 	ands.w	r2, r2, #1
 800025a:	d1e3      	bne.n	8000224 <main+0x5c>
		} else {
			// Set bits 24 onwards to 0, meaning PD12->PD15 are having LEDs turned off
			pOutputRegisterGPIOD->pin_12 = 0;
 800025c:	f8d3 1c14 	ldr.w	r1, [r3, #3092]	@ 0xc14
 8000260:	f362 310c 	bfi	r1, r2, #12, #1
 8000264:	f8c3 1c14 	str.w	r1, [r3, #3092]	@ 0xc14
			pOutputRegisterGPIOD->pin_13 = 0;
 8000268:	f8d3 1c14 	ldr.w	r1, [r3, #3092]	@ 0xc14
 800026c:	f362 314d 	bfi	r1, r2, #13, #1
 8000270:	f8c3 1c14 	str.w	r1, [r3, #3092]	@ 0xc14
			pOutputRegisterGPIOD->pin_14 = 0;
 8000274:	f8d3 1c14 	ldr.w	r1, [r3, #3092]	@ 0xc14
 8000278:	f362 318e 	bfi	r1, r2, #14, #1
 800027c:	f8c3 1c14 	str.w	r1, [r3, #3092]	@ 0xc14
			pOutputRegisterGPIOD->pin_15 = 0;
 8000280:	f8d3 1c14 	ldr.w	r1, [r3, #3092]	@ 0xc14
 8000284:	f362 31cf 	bfi	r1, r2, #15, #1
 8000288:	f8c3 1c14 	str.w	r1, [r3, #3092]	@ 0xc14
 800028c:	e7c6      	b.n	800021c <main+0x54>
 800028e:	bf00      	nop
 8000290:	40023000 	.word	0x40023000
 8000294:	40020000 	.word	0x40020000

08000298 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000298:	480d      	ldr	r0, [pc, #52]	@ (80002d0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800029a:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 800029c:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80002a0:	480c      	ldr	r0, [pc, #48]	@ (80002d4 <LoopForever+0x6>)
  ldr r1, =_edata
 80002a2:	490d      	ldr	r1, [pc, #52]	@ (80002d8 <LoopForever+0xa>)
  ldr r2, =_sidata
 80002a4:	4a0d      	ldr	r2, [pc, #52]	@ (80002dc <LoopForever+0xe>)
  movs r3, #0
 80002a6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80002a8:	e002      	b.n	80002b0 <LoopCopyDataInit>

080002aa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80002aa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80002ac:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80002ae:	3304      	adds	r3, #4

080002b0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80002b0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80002b2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80002b4:	d3f9      	bcc.n	80002aa <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80002b6:	4a0a      	ldr	r2, [pc, #40]	@ (80002e0 <LoopForever+0x12>)
  ldr r4, =_ebss
 80002b8:	4c0a      	ldr	r4, [pc, #40]	@ (80002e4 <LoopForever+0x16>)
  movs r3, #0
 80002ba:	2300      	movs	r3, #0
  b LoopFillZerobss
 80002bc:	e001      	b.n	80002c2 <LoopFillZerobss>

080002be <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80002be:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80002c0:	3204      	adds	r2, #4

080002c2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80002c2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80002c4:	d3fb      	bcc.n	80002be <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80002c6:	f000 f811 	bl	80002ec <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80002ca:	f7ff ff7d 	bl	80001c8 <main>

080002ce <LoopForever>:

LoopForever:
  b LoopForever
 80002ce:	e7fe      	b.n	80002ce <LoopForever>
  ldr   r0, =_estack
 80002d0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80002d4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80002d8:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 80002dc:	08000354 	.word	0x08000354
  ldr r2, =_sbss
 80002e0:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 80002e4:	2000001c 	.word	0x2000001c

080002e8 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80002e8:	e7fe      	b.n	80002e8 <ADC_IRQHandler>
	...

080002ec <__libc_init_array>:
 80002ec:	b570      	push	{r4, r5, r6, lr}
 80002ee:	4d0d      	ldr	r5, [pc, #52]	@ (8000324 <__libc_init_array+0x38>)
 80002f0:	4c0d      	ldr	r4, [pc, #52]	@ (8000328 <__libc_init_array+0x3c>)
 80002f2:	1b64      	subs	r4, r4, r5
 80002f4:	10a4      	asrs	r4, r4, #2
 80002f6:	2600      	movs	r6, #0
 80002f8:	42a6      	cmp	r6, r4
 80002fa:	d109      	bne.n	8000310 <__libc_init_array+0x24>
 80002fc:	4d0b      	ldr	r5, [pc, #44]	@ (800032c <__libc_init_array+0x40>)
 80002fe:	4c0c      	ldr	r4, [pc, #48]	@ (8000330 <__libc_init_array+0x44>)
 8000300:	f000 f818 	bl	8000334 <_init>
 8000304:	1b64      	subs	r4, r4, r5
 8000306:	10a4      	asrs	r4, r4, #2
 8000308:	2600      	movs	r6, #0
 800030a:	42a6      	cmp	r6, r4
 800030c:	d105      	bne.n	800031a <__libc_init_array+0x2e>
 800030e:	bd70      	pop	{r4, r5, r6, pc}
 8000310:	f855 3b04 	ldr.w	r3, [r5], #4
 8000314:	4798      	blx	r3
 8000316:	3601      	adds	r6, #1
 8000318:	e7ee      	b.n	80002f8 <__libc_init_array+0xc>
 800031a:	f855 3b04 	ldr.w	r3, [r5], #4
 800031e:	4798      	blx	r3
 8000320:	3601      	adds	r6, #1
 8000322:	e7f2      	b.n	800030a <__libc_init_array+0x1e>
 8000324:	0800034c 	.word	0x0800034c
 8000328:	0800034c 	.word	0x0800034c
 800032c:	0800034c 	.word	0x0800034c
 8000330:	08000350 	.word	0x08000350

08000334 <_init>:
 8000334:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000336:	bf00      	nop
 8000338:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800033a:	bc08      	pop	{r3}
 800033c:	469e      	mov	lr, r3
 800033e:	4770      	bx	lr

08000340 <_fini>:
 8000340:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000342:	bf00      	nop
 8000344:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000346:	bc08      	pop	{r3}
 8000348:	469e      	mov	lr, r3
 800034a:	4770      	bx	lr
